	+------------------------------------------------+
	| Cli                                            |
	+------------------------------------------------+
                            | ^
                            V |
+---+------------------------------------------------+
|   | Http                                           |
|   +------------------------------------------------+
| L | Kernel                                         |
| o +-----------------------+------------------------+  $ maple server
| g | Database              | Backend (+ Filesystem) |
|   +-----------------------+------------------------+
|   |                       | UNIX proc / AWS Job    |
+---+                       +------------------------+




Kernel (kernel.go)
==================

The Kernel API will be a Go-only API that will allow submission, manipulation, and querying workflows.

The Kernel is the only Maple API that's exported.  The Kernel will call into the Database layer.  Kernel should allow only non-destructive type pass-through functions, like GetWorkflowStatus(), but not SetWorkflowStatus(), and perhaps some minor repackaging of data (e.g. SnapshotOf() returning a *WorkflowInstance)

NewKernel(settings...) *Kernel
kernel.On() - start goroutines, re-attach to existing jobs, start accepting submissions
kernel.Off() - shut down all goroutines, stop accepting submissions, leave jobs running.
               calls to Submit(), Run() return fast with error.  Should return when all
               goroutines shut down
kernel.AcceptSubmissions(bool) - calls to Submit(), Run() return error fast when 'false'

kernel.Abort(uuid) - abort single workflow
kernel.AbortCall(uuid, fqn string)
kernel.Run(wdl, inputs, options string) *WorkflowInstance // returns when workflow finishes
kernel.Submit(...) uuid // same as above, but returns quick once it's scheduled.
kernel.SnapshotOf(uuid) *WorkflowInstance
kernel.List() []uuid

States: NotStarted -> Started -> [Aborted|Done|Failed]
                   -> Aborted

On Startup (always):

* Check database state, fix anything weird (maybe server was shutdown prematurely)
* Handle workflow FIFOs... maybe just reconnect to them, maybe remove them

workflowDispatcher - struct that contains relevant information for the WF dispatcher.  wd.run() is main goroutine
workflowInstance (formerly WorkflowInstance) - struct for workflow evaluation.
    * wi.run() - main evaluation loop (currently wd.runWorkflow)
    * wi.setStatus(newStatus string)
jobInstance - ji.run()

Database (db.go)
================

Only called by the Kernel to persist data.  Nothing exported.  All pointers are 

NewMapleDb(settings...) *MapleDb

db.GetJobStatus()
db.NewWorkflow()
db.NewJob()
db.SetWorkflowStatus()

Backend
=======

ONE backend per workflow.  Backend and filesystem are married.  Backends are identified by strings like "SGE+unixfs", "GCE", "AWS", "local".  Backends need to know how to return Readers and Writers for all files.  A backend is instantiated per workflow invocation so it can take advantage of workflow options

Optionally, some tasks can be run inline (locally), but only if certain criteria are met:

1) No File inputs/outputs

interface MapleBackend {
  	Run(cmd, fqn string) handle
  	Abort(h handle)
}

interface WdlFile {
	Read(p []byte) (n int, err error)
	Write(p []byte) (n int, err error)
}

NewLocalBackend(wf *WorkflowInstance, settings...) *MapleBackend
backend.DbInit() error
backend.Run(job *JobInstance) handle
backend.Abort(h handle)
backend.Results(h handle) []*WdlFile
backend.Status(h handle) string
backend.Wait(h handle)
backend.JobFile(job *JobInstance, relpath string) *WdlFile
backend.File(abspath string) *WdlFile

Filesystem
==========

NewUnixFs(path) *FileSystem
NewGcsFs(path) *FileSystem

fs.

Command Line (cli.go)
============

$ maple submit foo.wdl foo.inputs
cefd19cb-a8b1-474d-bf58-9c4522a5af98
(Sends POST /submit)

$ maple tail cefd19cb
... tailed log lines ...
(Sends GET /fifo/cefd19cb)

$ maple run foo.wdl foo.inputs
(= submit + tail)

$ maple ls
cefd19cb    foo.wdl		running			2016-08-10T01:39:32+00:00
93453875    bar.wdl		submitted		2016-08-10T01:39:32+00:00
9ce50dbf    baz.wdl		completed		2016-08-10T01:39:32+00:00
(Sends GET /list)

$ maple show 93453875
w.a 			running		local 		2016-08-10T01:39:32+00:00
w.b 			running		local 		2016-08-10T01:39:32+00:00
w.$scatter_0 	completed	-	 		2016-08-10T01:39:32+00:00
(Sends GET /show/93453875)

$ maple abort cefd19cb
(Sends POST /abort/cefd19cb)

$ maple ping
(Send GET /ping)

$ maple server --port=8765

HTTP API (http.go)
========

GET /ping
POST /submit
GET /fifo/:uuid
GET /list
GET /show/:uuid
POST /abort/:uuid
